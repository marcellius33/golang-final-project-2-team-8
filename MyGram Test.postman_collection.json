{
	"info": {
		"_postman_id": "4bbebff2-cd26-43cc-81d1-fa8ccc1b1bbc",
		"name": "MyGram Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21171989"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Register User with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(201);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Register Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body data should have id property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { payload } = responseJson;\r",
									" \r",
									"    pm.expect(payload).to.ownProperty('id');\r",
									"    pm.expect(payload.id).to.not.equals('');\r",
									" \r",
									"    pm.environment.set('currentUserId', payload.id);\r",
									"    pm.environment.set('currentEmail', payload.email);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"Username Test1122\",\r\n    \"email\" : \"usernametest22@gmail.com\",\r\n    \"age\": 13,\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/users/register",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Login Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body data should have property accessToken and refreshToken with correct value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { payload } = responseJson;\r",
									" \r",
									"    pm.expect(payload).to.have.ownProperty('token');\r",
									"    pm.expect(payload.token).to.not.equals('');\r",
									"    pm.expect(payload.token).to.not.equals(null);\r",
									" \r",
									"    // menyimpan accessToken dan refreshToken di environment variable\r",
									"    pm.environment.set('accessToken', payload.token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"{{currentEmail}}\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/users/login",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Update Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"Username Test222x\",\r\n    \"email\" : \"usernametestxx@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/users/{{currentUserId}}",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"users",
								"{{currentUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Your account has been successfully deleted');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/users/{{currentUserId}}",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"users",
								"{{currentUserId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Prerequisite",
			"item": [
				{
					"name": "[Prerequisite] Register User with Valid Payload Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { payload } = pm.response.json();\r",
									"pm.environment.set('currentUserId', payload.id);\r",
									"pm.environment.set('currentEmail', payload.email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"Username Prequisite\",\r\n    \"email\" : \"usernamepre@gmail.com\",\r\n    \"age\": 13,\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/users/register",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Prerequisite] Login with Valid Payload Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { payload } = pm.response.json();\r",
									"pm.environment.set('accessToken', payload.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"{{currentEmail}}\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/users/login",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Prerequisite] Add Photo with Valid Payload Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { payload } = pm.response.json();\r",
									"pm.environment.set('photoCommentId', payload.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"Title Prerequest\",\r\n    \"caption\" : \"wah bagus banget\",\r\n    \"photo_url\": \"http://localhost\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/photos/",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"photos",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Photos",
			"item": [
				{
					"name": "Add Photo with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(201);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Create Photo Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { payload } = responseJson;\r",
									" \r",
									"    pm.expect(payload).to.ownProperty('id');\r",
									"    pm.expect(payload.id).to.not.equals(null);\r",
									" \r",
									"    pm.environment.set('photoId', payload.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"Title Yipi\",\r\n    \"caption\" : \"wah bagus\",\r\n    \"photo_url\": \"http://localhost\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/photos/",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"photos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Photo with Valid Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.be.an('object');\r",
									"}); \r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"  const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.have.ownProperty('status');\r",
									"   pm.expect(responseJson.status).to.equals(200);\r",
									"   pm.expect(responseJson).to.have.ownProperty('payload');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   const { payload } = responseJson;\r",
									"\r",
									"   pm.expect(payload).to.be.an('array');\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/photos/",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"photos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Photo  with Valid Auth and Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Update Photo Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"Title Yipi\",\r\n    \"caption\" : \"wah bagus\",\r\n    \"photo_url\": \"http://localhost\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/photos/{{photoId}}",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"photos",
								"{{photoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Photo  with Valid Auth and Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Your photo has been successfully deleted');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/photos/{{photoId}}",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"photos",
								"{{photoId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Add Comment with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(201);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Create Comment Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { payload } = responseJson;\r",
									" \r",
									"    pm.expect(payload).to.ownProperty('id');\r",
									"    pm.expect(payload.id).to.not.equals(null);\r",
									" \r",
									"    pm.environment.set('commentId', payload.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\" : \"beneran bagus\",\r\n    \"photo_id\" : {{photoCommentId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/comments/",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"comments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment with Valid Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.be.an('object');\r",
									"}); \r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"  const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.have.ownProperty('status');\r",
									"   pm.expect(responseJson.status).to.equals(200);\r",
									"   pm.expect(responseJson).to.have.ownProperty('payload');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   const { payload } = responseJson;\r",
									"\r",
									"   pm.expect(payload).to.be.an('array');\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/comments/",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"comments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Comment  with Valid Auth and Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Update Comment Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\" : \"waaahh beneran bagus\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/comments/{{commentId}}",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment  with Valid Auth and Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Your comment has been successfully deleted');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/comments/{{commentId}}",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Social Media",
			"item": [
				{
					"name": "Add Social Media with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(201);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Create Social Media Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { payload } = responseJson;\r",
									" \r",
									"    pm.expect(payload).to.ownProperty('id');\r",
									"    pm.expect(payload.id).to.not.equals(null);\r",
									" \r",
									"    pm.environment.set('socialMediaId', payload.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"name social media\",\r\n    \"social_media_url\": \"http://localhost\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/socialmedias/",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"socialmedias",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Social Media with Valid Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.be.an('object');\r",
									"}); \r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"  const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.have.ownProperty('status');\r",
									"   pm.expect(responseJson.status).to.equals(200);\r",
									"   pm.expect(responseJson).to.have.ownProperty('payload');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   const { payload } = responseJson;\r",
									"\r",
									"   pm.expect(payload).to.be.an('array');\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/socialmedias/",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"socialmedias",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Social Media with Valid Auth and Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Update Social Media Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"name social media baru\",\r\n    \"social_media_url\": \"http://localhost\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/socialmedias/{{socialMediaId}}",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"socialmedias",
								"{{socialMediaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Social Media  with Valid Auth and Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Your social media has been successfully deleted');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/socialmedias/{{socialMediaId}}",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"socialmedias",
								"{{socialMediaId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "End Requisite",
			"item": [
				{
					"name": "Delete Photo  with Valid Auth and Payload Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/photos/{{photoCommentId}}",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"photos",
								"{{photoCommentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User with Valid Id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-2-team-8-production.up.railway.app/users/{{currentUserId}}",
							"protocol": "https",
							"host": [
								"golang-final-project-2-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"users",
								"{{currentUserId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}